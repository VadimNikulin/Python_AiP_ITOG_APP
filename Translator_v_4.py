import tkinter as tk
from tkinter import ttk, messagebox
from deep_translator import GoogleTranslator


class DigitalTranslator:
    def __init__(self, root):
        self.root = root
        self.root.title("Digital –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫")
        self.root.geometry("1440x500")
        self.root.resizable(True, True)
        self.dark_mode = True
        self.theme_colors = {
            'dark': {
                'bg': '#2d2d2d', 'fg': '#ffffff', 'text_bg': '#3d3d3d', 'text_fg': '#ffffff', 'button_bg': '#4d4d4d',
                'button_fg': '#ffffff', 'entry_bg': '#3d3d3d', 'entry_fg': '#ffffff', 'frame_bg': '#2d2d2d',
                'name_company_color': '#5d9cec', 'combobox_bg': '#3d3d3d', 'combobox_fg': '#ffffff',
                'combobox_field_bg': '#3d3d3d', 'combobox_arrow_bg': '#4d4d4d', 'combobox_arrow_fg': '#ffffff'
            },
            'light': {
                'bg': '#f5f5f5', 'fg': '#000000', 'text_bg': '#ffffff', 'text_fg': '#000000', 'button_bg': '#e0e0e0',
                'button_fg': '#000000', 'entry_bg': '#ffffff', 'entry_fg': '#000000', 'frame_bg': '#f5f5f5',
                'name_company_color': '#2b73b7', 'combobox_bg': '#ffffff', 'combobox_fg': '#000000',
                'combobox_field_bg': '#ffffff', 'combobox_arrow_bg': '#e0e0e0', 'combobox_arrow_fg': '#000000'
            }
        }
        self.languages = {
            'ru': '–†—É—Å—Å–∫–∏–π', 'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 'af': '–ê—Ñ—Ä–∏–∫–∞–∞–Ω—Å', 'am': '–ê–º—Ö–∞—Ä—Å–∫–∏–π', 'ar': '–ê—Ä–∞–±—Å–∫–∏–π',
            'az': '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π', 'be': '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π', 'bg': '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π',
            'bn': '–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π', 'bs': '–ë–æ—Å–Ω–∏–π—Å–∫–∏–π', 'ca': '–ö–∞—Ç–∞–ª–∞–Ω—Å–∫–∏–π', 'ceb': '–°–µ–±—É–∞–Ω—Å–∫–∏–π',
            'co': '–ö–æ—Ä—Å–∏–∫–∞–Ω—Å–∫–∏–π', 'cs': '–ß–µ—à—Å–∫–∏–π', 'cy': '–í–∞–ª–ª–∏–π—Å–∫–∏–π', 'da': '–î–∞—Ç—Å–∫–∏–π',
            'de': '–ù–µ–º–µ—Ü–∫–∏–π', 'el': '–ì—Ä–µ—á–µ—Å–∫–∏–π', 'eo': '–≠—Å–ø–µ—Ä–∞–Ω—Ç–æ',
            'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π', 'et': '–≠—Å—Ç–æ–Ω—Å–∫–∏–π', 'eu': '–ë–∞—Å–∫—Å–∫–∏–π', 'fa': '–ü–µ—Ä—Å–∏–¥—Å–∫–∏–π',
            'fi': '–§–∏–Ω—Å–∫–∏–π', 'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', 'fy': '–§—Ä–∏–∑—Å–∫–∏–π', 'ga': '–ò—Ä–ª–∞–Ω–¥—Å–∫–∏–π',
            'gd': '–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∏–π –≥—ç–ª—å—Å–∫–∏–π', 'gl': '–ì–∞–ª–∏—Å–∏–π—Å–∫–∏–π', 'gu': '–ì—É–¥–∂–∞—Ä–∞—Ç–∏', 'ha': '–•–∞—É—Å–∞',
            'haw': '–ì–∞–≤–∞–π—Å–∫–∏–π', 'he': '–ò–≤—Ä–∏—Ç', 'hi': '–•–∏–Ω–¥–∏', 'hmn': '–•–º–æ–Ω–≥',
            'hr': '–•–æ—Ä–≤–∞—Ç—Å–∫–∏–π', 'ht': '–ì–∞–∏—Ç—è–Ω—Å–∫–∏–π –∫—Ä–µ–æ–ª—å—Å–∫–∏–π', 'hu': '–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π', 'hy': '–ê—Ä–º—è–Ω—Å–∫–∏–π',
            'id': '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π', 'ig': '–ò–≥–±–æ', 'is': '–ò—Å–ª–∞–Ω–¥—Å–∫–∏–π', 'it': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
            'iw': '–ò–≤—Ä–∏—Ç', 'ja': '–Ø–ø–æ–Ω—Å–∫–∏–π', 'jw': '–Ø–≤–∞–Ω—Å–∫–∏–π', 'ka': '–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π',
            'kk': '–ö–∞–∑–∞—Ö—Å–∫–∏–π', 'km': '–ö—Ö–º–µ—Ä—Å–∫–∏–π', 'kn': '–ö–∞–Ω–Ω–∞–¥–∞', 'ko': '–ö–æ—Ä–µ–π—Å–∫–∏–π',
            'ku': '–ö—É—Ä–¥—Å–∫–∏–π (–∫—É—Ä–º–∞–Ω–¥–∂–∏)', 'ky': '–ö–∏—Ä–≥–∏–∑—Å–∫–∏–π', 'la': '–õ–∞—Ç–∏–Ω—Å–∫–∏–π', 'lb': '–õ—é–∫—Å–µ–º–±—É—Ä–≥—Å–∫–∏–π',
            'lo': '–õ–∞–æ—Å—Å–∫–∏–π', 'lt': '–õ–∏—Ç–æ–≤—Å–∫–∏–π', 'lv': '–õ–∞—Ç—ã—à—Å–∫–∏–π', 'mg': '–ú–∞–ª–∞–≥–∞—Å–∏–π—Å–∫–∏–π', 'mi': '–ú–∞–æ—Ä–∏',
            'mk': '–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π', 'ml': '–ú–∞–ª–∞—è–ª–∞–º', 'mn': '–ú–æ–Ω–≥–æ–ª—å—Å–∫–∏–π', 'mr': '–ú–∞—Ä–∞—Ç—Ö–∏', 'ms': '–ú–∞–ª–∞–π—Å–∫–∏–π',
            'mt': '–ú–∞–ª—å—Ç–∏–π—Å–∫–∏–π', 'my': '–ë–∏—Ä–º–∞–Ω—Å–∫–∏–π', 'ne': '–ù–µ–ø–∞–ª—å—Å–∫–∏–π', 'nl': '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π',
            'no': '–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π', 'ny': '–ß–∏—á–µ–≤–∞', 'or': '–û—Ä–∏—è', 'pa': '–ü–µ–Ω–¥–∂–∞–±—Å–∫–∏–π',
            'pl': '–ü–æ–ª—å—Å–∫–∏–π', 'ps': '–ü—É—à—Ç—É', 'pt': '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', 'ro': '–†—É–º—ã–Ω—Å–∫–∏–π',
            'sd': '–°–∏–Ω–¥—Ö–∏', 'si': '–°–∏–Ω–≥–∞–ª—å—Å–∫–∏–π', 'sk': '–°–ª–æ–≤–∞—Ü–∫–∏–π', 'sl': '–°–ª–æ–≤–µ–Ω—Å–∫–∏–π',
            'sm': '–°–∞–º–æ–∞–Ω—Å–∫–∏–π', 'sn': '–®–æ–Ω–∞', 'so': '–°–æ–º–∞–ª–∏–π—Å–∫–∏–π', 'sq': '–ê–ª–±–∞–Ω—Å–∫–∏–π', 'sr': '–°–µ—Ä–±—Å–∫–∏–π',
            'st': '–°–µ—Å–æ—Ç–æ', 'su': '–°—É–¥–∞–Ω—Å–∫–∏–π', 'sv': '–®–≤–µ–¥—Å–∫–∏–π', 'sw': '–°—É–∞—Ö–∏–ª–∏', 'ta': '–¢–∞–º–∏–ª—å—Å–∫–∏–π',
            'te': '–¢–µ–ª—É–≥—É', 'tg': '–¢–∞–¥–∂–∏–∫—Å–∫–∏–π', 'th': '–¢–∞–π—Å–∫–∏–π', 'tl': '–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π', 'tr': '–¢—É—Ä–µ—Ü–∫–∏–π',
            'ug': '–£–π–≥—É—Ä—Å–∫–∏–π', 'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π', 'ur': '–£—Ä–¥—É', 'uz': '–£–∑–±–µ–∫—Å–∫–∏–π', 'vi': '–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π',
            'xh': '–ö–æ—Å–∞', 'yi': '–ò–¥–∏—à', 'yo': '–ô–æ—Ä—É–±–∞', 'zh-CN': '–ö–∏—Ç–∞–π—Å–∫–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)',
            'zh-TW': '–ö–∏—Ç–∞–π—Å–∫–∏–π (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π)', 'zu': '–ó—É–ª—É—Å—Å–∫–∏–π'
        }
        self.reversed_languages = {v.lower(): k for k, v in self.languages.items()}
        self.languages_list = sorted(list(self.languages.values()))
        self.create_widgets()
        self.apply_theme()

    def create_widgets(self):
        style = ttk.Style()
        style.configure('TButton', font=('Arial', 16))
        style.configure('TLabel', font=('Arial', 16))
        self.top_frame = ttk.Frame(self.root)
        self.top_frame.pack(pady=10, padx=150, fill=tk.X)
        self.theme_btn = ttk.Button(self.top_frame, text="‚òÄÔ∏è", width=3, command=self.toggle_theme)
        self.theme_btn.pack(side=tk.RIGHT, padx=5)
        self.source_lang = tk.StringVar(value="–†—É—Å—Å–∫–∏–π")
        self.source_label = ttk.Label(self.top_frame, text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å:")
        self.source_label.pack(side=tk.LEFT, padx=5)
        self.source_menu = ttk.Combobox(self.top_frame, textvariable=self.source_lang, values=self.languages_list, state="readonly")
        self.source_menu.pack(side=tk.LEFT, padx=34)
        self.swap_btn = ttk.Button(self.top_frame, text="‚áÑ", width=3, command=self.swap_languages)
        self.swap_btn.pack(side=tk.LEFT, padx=190)
        self.target_lang = tk.StringVar(value="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π")
        self.target_label = ttk.Label(self.top_frame, text="–ù–∞:")
        self.target_label.pack(side=tk.LEFT, padx=55)
        self.target_menu = ttk.Combobox(self.top_frame, textvariable=self.target_lang, values=self.languages_list, state="readonly")
        self.target_menu.pack(side=tk.LEFT, padx=5)
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        self.source_text = tk.Text(self.main_frame, wrap=tk.WORD, font=('Arial', 12), height=10, padx=10, pady=10)
        self.source_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.translate_btn = ttk.Button(self.main_frame, text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ‚Üí", command=self.translate)
        self.translate_btn.pack(side=tk.LEFT, padx=5, fill=tk.Y)
        self.target_text = tk.Text(self.main_frame, wrap=tk.WORD, font=('Arial', 12), height=10, padx=10, pady=10, state=tk.DISABLED)
        self.target_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.bottom_frame = ttk.Frame(self.root)
        self.bottom_frame.pack(fill=tk.X, padx=10, pady=10)
        self.name_company = tk.Label(self.bottom_frame, text="Digital Titan co.", font=("Julius Sans One", 32))
        self.name_company.pack(pady=20)
        self.clear_btn = ttk.Button(self.bottom_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_text)
        self.clear_btn.pack(side=tk.RIGHT, padx=5)
        self.copy_btn = ttk.Button(self.bottom_frame, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text)
        self.copy_btn.pack(side=tk.RIGHT, padx=5)

    def toggle_theme(self):
        self.dark_mode = not self.dark_mode
        self.apply_theme()
        self.theme_btn.config(text="üåô" if self.dark_mode else "‚òÄÔ∏è")

    def apply_theme(self):
        theme = 'dark' if self.dark_mode else 'light'
        colors = self.theme_colors[theme]
        self.root.configure(bg=colors['bg'])
        style = ttk.Style()
        style.theme_use('default')
        style.configure('.', background=colors['frame_bg'], foreground=colors['fg'], fieldbackground=colors['entry_bg'], selectbackground=colors['name_company_color'], selectforeground=colors['text_fg'])
        style.configure('TFrame', background=colors['frame_bg'])
        style.configure('TLabel', background=colors['frame_bg'], foreground=colors['fg'])
        style.configure('TButton', background=colors['button_bg'], foreground=colors['button_fg'], bordercolor=colors['button_bg'], lightcolor=colors['button_bg'], darkcolor=colors['button_bg'])
        style.configure('TCombobox', fieldbackground=colors['combobox_field_bg'], foreground=colors['combobox_fg'], background=colors['combobox_bg'], arrowcolor=colors['combobox_arrow_fg'], selectbackground=colors['name_company_color'])
        style.map('TCombobox', fieldbackground=[('readonly', colors['combobox_field_bg'])], background=[('readonly', colors['combobox_bg'])], arrowcolor=[('readonly', colors['combobox_arrow_fg'])])
        self.source_text.config(bg=colors['text_bg'], fg=colors['text_fg'], insertbackground=colors['fg'])
        self.target_text.config(bg=colors['text_bg'], fg=colors['text_fg'], insertbackground=colors['fg'])
        self.name_company.config(bg=colors['frame_bg'], fg=colors['name_company_color'])
        self.top_frame.configure(style='TFrame')
        self.main_frame.configure(style='TFrame')
        self.bottom_frame.configure(style='TFrame')
        self.theme_btn.configure(style='TButton')
        self.swap_btn.configure(style='TButton')
        self.translate_btn.configure(style='TButton')
        self.clear_btn.configure(style='TButton')
        self.copy_btn.configure(style='TButton')
        self.source_label.configure(style='TLabel')
        self.target_label.configure(style='TLabel')
        self.source_menu.configure(style='TCombobox')
        self.target_menu.configure(style='TCombobox')

    def translate(self):
        input_language = self.source_lang.get()
        output_language = self.target_lang.get()
        word = self.source_text.get("1.0", tk.END).strip()
        if not word:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return
        try:
            translation_result = self.translated(word, input_language, output_language)
            self.target_text.config(state=tk.NORMAL)
            self.target_text.delete("1.0", tk.END)
            self.target_text.insert(tk.END, translation_result)
            self.target_text.config(state=tk.DISABLED)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥: {str(e)}")

    def translated(self, word, input_language, output_language):
        code_inp = self.reversed_languages.get(input_language.lower(), "")
        code_out = self.reversed_languages.get(output_language.lower(), "")
        if not code_inp or not code_out:
            return "–Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        translator = GoogleTranslator(source=code_inp, target=code_out)
        return translator.translate(word)

    def swap_languages(self):
        current_source = self.source_lang.get()
        current_target = self.target_lang.get()
        self.source_lang.set(current_target)
        self.target_lang.set(current_source)
        source_text = self.source_text.get("1.0", tk.END).strip()
        target_text = self.target_text.get("1.0", tk.END).strip() if not self.target_text.compare("end-1c", "==","1.0") else ""
        if source_text and target_text:
            self.source_text.delete("1.0", tk.END)
            self.source_text.insert("1.0", target_text)
            self.target_text.config(state=tk.NORMAL)
            self.target_text.delete("1.0", tk.END)
            self.target_text.insert("1.0", source_text)
            self.target_text.config(state=tk.DISABLED)

    def clear_text(self):
        self.source_text.delete("1.0", tk.END)
        self.target_text.config(state=tk.NORMAL)
        self.target_text.delete("1.0", tk.END)
        self.target_text.config(state=tk.DISABLED)

    def copy_text(self):
        if not self.target_text.compare("end-1c", "==", "1.0"):
            text_to_copy = self.target_text.get("1.0", tk.END).strip()
            self.root.clipboard_clear()
            self.root.clipboard_append(text_to_copy)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")


if __name__ == "__main__":
    root = tk.Tk()
    app = DigitalTranslator(root)
    root.mainloop()
